name: terraform-reusable
on:
  workflow_call:
    inputs:
      working_directory:
        type: string
        description: "working directory"
        required: false
        default: '.'
      terraform_action:
        type: string
        description: "'plan' or 'apply' or 'destroy'"
        required: true
      terraform_version:
        type: string
        description: "terraform version"
        required: false
        default: '1.3.9'
      terraform_statefile:
        type: string
        description: "the name of the terraform state file"
        required: false
        default: 'terraform.tfstate'
      environment:
        type: string
        description: "the environment we're deploying to"
        required: true
      aws_region:
        type: string
        description: "aws region to manage resources within"
        default: 'us-east-1'
      aws_role:
        type: string
        description: "aws role to assume"
        required: true

jobs:
  terraform:
    if: ${{ contains(fromJSON('["push", "pull_request"]'), github.event_name) && inputs.terraform_action == 'plan' || github.event_name == 'push' && inputs.terraform_action == 'apply' }}
    environment: ${{ inputs.terraform_action }}
    runs-on:
      - ubuntu-latest
    steps:
      - name: clone the repository
        uses: actions/checkout@v3
        
      - name: configure aws credentials
        run: |
          echo "assume role"

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
      
      - name: setup GHES token ## for terraform init to pull module from CloudTerraformModules repos
        env:
          GH_ACTION_BOT_TOKEN: ${{ secrets.GH_ACTION_BOT_TOKEN }}
        run: |
          echo $GH_ACTION_BOT_TOKEN > ~/.git-credentials
          git config --global credential.helper store

      - name: Terraform init
        working-directory: ${{ inputs.working_directory }}
        run: terraform init

      - name: Terraform fmt
        working-directory: ${{ inputs.working_directory }}
        run: terraform fmt -recursive -check

      - name: Terraform validate
        working-directory: ${{ inputs.working_directory }}
        run: terraform validate
      
      - name: Terraform plan
        id: plantf
        working-directory: ${{ inputs.working_directory }}
        if: ${{ inputs.terraform_action == 'plan' }}
        run: |
          terraform ${{ inputs.terraform_action }} -var-file=variables/${{ inputs.environment }}.json -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan

      - name: Reformat Plan
        if: ${{ inputs.terraform_action == 'plan' && steps.plantf.outcome == 'success' && github.event_name == 'pull_request' }}
        run: |
          echo '${{ steps.plantf.outputs.stdout || steps.plantf.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt \

      - name: write plan result to PR
        if: ${{ inputs.terraform_action == 'plan' && steps.plantf.outcome == 'success' && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        env:
          GITHUB_API_URL: 'https://github.com'
        with:
          script: |
            const fs = require('fs')
            const plan_file = fs.readFileSync('plan.txt', 'utf8')
            const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file

            const output = `#### Terraform Plan ${{ inputs.environment }}

            <details><summary>Show Plan</summary>

            \`\`\`\diff
            ${plan}
            \`\`\`

            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply
        working-directory: ${{ inputs.working_directory }}
        run: terraform ${{ inputs.terraform_action }} -var-file=variables/${{ inputs.environment }}.json -auto-approve
        if: ${{ inputs.terraform_action == 'apply' }}